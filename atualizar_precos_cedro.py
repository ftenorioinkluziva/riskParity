import threading
import time
from queue import Queue, Empty
import cd3_connector
import logging
from supabase import create_client
import os
from dotenv import load_dotenv
import json
import sys

# Carregar vari√°veis do arquivo .env
load_dotenv()

# Configura√ß√µes do Supabase
SUPABASE_URL = os.environ.get('SUPABASE_URL')
SUPABASE_KEY = os.environ.get('SUPABASE_KEY')

# Verificar se as vari√°veis de ambiente est√£o definidas
if not SUPABASE_URL or not SUPABASE_KEY:
    print("\n‚ö†Ô∏è AVISO: Vari√°veis de ambiente SUPABASE_URL e/ou SUPABASE_KEY n√£o definidas.")
    print("Defina estas vari√°veis ou insira os valores diretamente no c√≥digo (apenas para desenvolvimento):\n")
    # Fallback para valores hardcoded (apenas para desenvolvimento)
    SUPABASE_URL = 'https://dxwebxduuazebqtkumtv.supabase.co'
    SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR4d2VieGR1dWF6ZWJxdGt1bXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1OTMxMzcsImV4cCI6MjA1NzE2OTEzN30.v53W6iz_BJup66qst03jWqjHzJ0DGKmUC6WrVGLpt-Y'

# Credenciais para o CD3 Connector
CD3_USERNAME = os.environ.get('CD3_USERNAME', 'fernando_cd3_python')
CD3_PASSWORD = os.environ.get('CD3_PASSWORD', 'c3&Rss')
CD3_SERVER = os.environ.get('CD3_SERVER', 'datafeed1.cedrotech.com')
CD3_PORT = os.environ.get('CD3_PORT', '81')

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("atualizacao_precos.log"),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger("atualizador_precos")

class CedroUpdater:
    def __init__(self, user: str, password: str, interval_seconds=60, timeout=20):
        """
        Inicializa o atualizador de pre√ßos usando o CD3 Connector
        
        Args:
            user (str): Nome de usu√°rio da Cedro
            password (str): Senha da Cedro
            interval_seconds (int): Intervalo entre atualiza√ß√µes em segundos
            timeout (int): Tempo m√°ximo para receber cota√ß√µes em segundos
        """
        # Armazenar par√¢metros
        self.user = user
        self.password = password
        self.interval_seconds = interval_seconds
        self.timeout = timeout
        
        # Configurar log path
        self.log_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "logs_cd3")
        os.makedirs(self.log_path, exist_ok=True)
        
        # Inicializar vari√°veis
        self._conn = None
        self._queue = Queue()
        self._running = False
        self._signal = threading.Event()
        self._atualizacoes_recebidas = 0
        self._atualizacoes_esperadas = 0
        self._tempo_inicio = 0
        self._ultima_atualizacao = 0
        
        # Conex√£o com Supabase
        try:
            self.supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
            logger.info("‚úÖ Conex√£o com Supabase estabelecida com sucesso.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao conectar com o Supabase: {str(e)}")
            self.supabase = None
            
        # Dicion√°rio para armazenar a correspond√™ncia entre s√≠mbolos da Cedro e tickers da B3
        self.ticker_map = {}
        
        # Carregar lista de ativos do banco de dados
        self.ativos = []
        self._load_ativos()
    
    def _load_ativos(self):
        """Carrega a lista de ativos do banco de dados Supabase"""
        if not self.supabase:
            logger.error("‚ö†Ô∏è Supabase n√£o inicializado. N√£o foi poss√≠vel carregar ativos.")
            return
            
        try:
            response = self.supabase.table('ativos').select('*').execute()
            self.ativos = response.data
            
            # Tabela de equival√™ncia espec√≠fica entre tickers do banco e tickers Cedro
            equivalencia_tickers = {
                'BOVA11.SA': 'BOVA11',
                'XFIX11.SA': 'XFIX11',
                'IB5M11.SA': 'IB5M11',
                'B5P211.SA': 'B5P211',
                'FIXA11.SA': 'FIXA11',
                'USDBRL=X': 'USDBRL'
            }
            
            # Criar mapeamento para os tickers
            for ativo in self.ativos:
                ticker_banco = ativo['ticker']
                # Usar a tabela de equival√™ncia, se dispon√≠vel
                if ticker_banco in equivalencia_tickers:
                    ticker_cedro = equivalencia_tickers[ticker_banco]
                else:
                    # Para outros casos, aplicar a regra geral (remover sufixos)
                    ticker_cedro = ticker_banco.split('.')[0].replace('=', '')
                
                # Armazenar o mapeamento nos dois sentidos
                self.ticker_map[ticker_cedro] = ticker_banco
                
                logger.debug(f"Mapeamento: {ticker_banco} -> {ticker_cedro}")
                
            logger.info(f"‚úÖ Carregados {len(self.ativos)} ativos do banco de dados.")
            
            # Filtrar tickers dispon√≠veis na Cedro (excluir CDI e USDBRL)
            self.tickers_cedro = [
                cedro for cedro, _ in self.ticker_map.items() 
                if cedro not in ['CDI', 'USDBRL']
            ]
            self._atualizacoes_esperadas = len(self.tickers_cedro)
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao carregar ativos: {str(e)}")
    
    def start(self):
        """Inicia o loop de atualiza√ß√£o"""
        if self._running:
            logger.warning("Atualizador j√° est√° em execu√ß√£o")
            return
            
        self._running = True
        
        logger.info(f"üîÑ Iniciando loop de atualiza√ß√£o a cada {self.interval_seconds} segundos")
        logger.info(f"‚è±Ô∏è Timeout para receber cota√ß√µes: {self.timeout} segundos")
        
        # Iniciar o loop em uma thread separada
        threading.Thread(target=self._update_loop).start()
    
    def stop(self):
        """Para o loop de atualiza√ß√£o"""
        self._running = False
        self._signal.set()
        logger.info("üõë Parando atualizador...")
    
    def _update_loop(self):
        """Loop de atualiza√ß√£o de pre√ßos"""
        try:
            while self._running:
                # Registrar in√≠cio do ciclo
                self._tempo_inicio = time.time()
                now = time.strftime("%Y-%m-%d %H:%M:%S")
                logger.info(f"üîÑ Iniciando ciclo de atualiza√ß√£o em {now}")
                
                # Reiniciar contadores
                self._atualizacoes_recebidas = 0
                self._queue = Queue()
                
                # Iniciar conex√£o
                self._iniciar_conexao()
                
                # Enviar comandos de consulta
                self._solicitar_cotacoes()
                
                # Aguardar as cota√ß√µes
                self._aguardar_cotacoes()
                
                # Finalizar conex√£o
                self._finalizar_conexao()
                
                # Registrar fim do ciclo
                elapsed = time.time() - self._tempo_inicio
                logger.info(f"‚úÖ Ciclo de atualiza√ß√£o conclu√≠do em {elapsed:.1f} segundos")
                logger.info(f"üìä Atualiza√ß√µes recebidas: {self._atualizacoes_recebidas}/{self._atualizacoes_esperadas}")
                
                # Atualizar timestamp da √∫ltima atualiza√ß√£o
                self._ultima_atualizacao = time.time()
                
                # Calcular tempo at√© a pr√≥xima atualiza√ß√£o
                next_update = self.interval_seconds - elapsed
                if next_update > 0:
                    next_time = time.strftime("%H:%M:%S", time.localtime(time.time() + next_update))
                    logger.info(f"‚è±Ô∏è Pr√≥xima atualiza√ß√£o √†s {next_time} ({next_update:.1f} segundos)")
                    
                    # Aguardar at√© o pr√≥ximo ciclo, a menos que seja solicitado para parar
                    self._signal.wait(next_update)
                    
                    # Se o sinal foi disparado, verificar se ainda estamos em execu√ß√£o
                    if not self._running:
                        break
                else:
                    logger.warning("‚ö†Ô∏è Ciclo de atualiza√ß√£o demorou mais que o intervalo configurado")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro no loop de atualiza√ß√£o: {str(e)}")
        finally:
            logger.info("üëã Loop de atualiza√ß√£o encerrado")
    
    def _iniciar_conexao(self):
        """Inicia uma nova conex√£o com o servidor CD3"""
        try:
            # Inicializar conex√£o
            self._conn = cd3_connector.CD3Connector(
                self.user, self.password, 
                self._on_disconnect, 
                self._on_message, 
                self._on_connect,
                log_level=logging.WARNING,  # Reduzir o n√≠vel de log para evitar polui√ß√£o
                log_path=self.log_path
            )
            
            # Iniciar conex√£o
            self._conn.start()
            
            # Aguardar conex√£o
            start_time = time.time()
            while not hasattr(self, '_connected') or not self._connected:
                time.sleep(0.1)
                if time.time() - start_time > 10:  # Timeout ap√≥s 10 segundos
                    logger.error("‚ö†Ô∏è Timeout ao aguardar conex√£o")
                    break
            
            # Aguardar um pouco para a conex√£o estabilizar
            time.sleep(1)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar conex√£o CD3: {str(e)}")
    
    def _finalizar_conexao(self):
        """Finaliza a conex√£o com o servidor CD3"""
        try:
            if self._conn:
                self._conn.stop()
                self._conn = None
                logger.info("‚úÖ Conex√£o CD3 encerrada")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao finalizar conex√£o CD3: {str(e)}")
    
    def _solicitar_cotacoes(self):
        """Solicita cota√ß√µes para todos os ativos usando o modo snapshot (N)"""
        try:
            for ticker_cedro in self.tickers_cedro:
                try:
                    # Usar o modo snapshot com o par√¢metro N
                    logger.info(f"üìä Solicitando snapshot para {ticker_cedro}")
                    self._conn.send_command(f"SQT {ticker_cedro} N")
                    # Pequena pausa para n√£o sobrecarregar o servidor
                    time.sleep(0.3)
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è Erro ao solicitar cota√ß√£o para {ticker_cedro}: {str(e)}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao solicitar cota√ß√µes: {str(e)}")
    
    def _aguardar_cotacoes(self):
        """Aguarda o recebimento das cota√ß√µes por um tempo m√°ximo de timeout"""
        try:
            timeout_time = time.time() + self.timeout
            
            while time.time() < timeout_time and self._atualizacoes_recebidas < self._atualizacoes_esperadas:
                # Processar mensagens recebidas
                try:
                    msg = self._queue.get(timeout=0.5)
                    self._process_message(msg)
                    self._queue.task_done()
                except Empty:
                    # Timeout da fila, verificar se atingimos o timeout total
                    if time.time() >= timeout_time:
                        logger.warning(f"‚è±Ô∏è Timeout atingido ao aguardar cota√ß√µes")
                        break
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è Erro ao processar mensagem da fila: {str(e)}")
            
            # Verificar se recebemos todas as cota√ß√µes esperadas
            if self._atualizacoes_recebidas < self._atualizacoes_esperadas:
                logger.warning(f"‚ö†Ô∏è N√£o recebemos todas as cota√ß√µes esperadas: {self._atualizacoes_recebidas}/{self._atualizacoes_esperadas}")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao aguardar cota√ß√µes: {str(e)}")
    
    def _on_connect(self):
        """Callback executado quando a conex√£o com CD3 √© estabelecida"""
        logger.info("‚úÖ Conectado ao servidor CD3")
        self._connected = True
    
    def _on_disconnect(self):
        """Callback executado quando a conex√£o com CD3 √© perdida"""
        logger.warning("‚ö†Ô∏è Desconectado do servidor CD3")
        self._connected = False
    
    def _on_message(self, msg: str):
        """
        Callback executado quando uma mensagem √© recebida do CD3
        
        Args:
            msg (str): Mensagem recebida
        """
        # Adicionar mensagem √† fila para processamento
        if msg and msg.strip():
            self._queue.put(msg)
    
    def _process_message(self, msg: str):
        """
        Processa uma mensagem recebida do CD3
        
        Args:
            msg (str): Mensagem recebida
        """
        try:
            # Verificar mensagens de erro
            if msg.startswith("E:"):
                logger.warning(f"‚ö†Ô∏è Erro na cota√ß√£o: {msg}")
                return
                
            # Processar mensagem de cota√ß√£o
            self._process_quote_message(msg)
                
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao processar mensagem: {str(e)}")
            logger.error(f"Mensagem: {msg}")
    
    def _process_quote_message(self, msg: str):
        """
        Processa uma mensagem de cota√ß√£o do CD3 e atualiza o banco de dados
        
        Args:
            msg (str): Mensagem de cota√ß√£o
        """
        try:
            # Verifica se a mensagem cont√©m dados de cota√ß√£o
            if not msg or len(msg) < 10:
                return
                
            # Verificar se √© uma resposta no formato T: (Tick) conforme documenta√ß√£o Cedro
            # Formato: T:TICKER:TIMESTAMP:1:DATA:2:LAST_PRICE:3:BID:4:ASK:...
            if msg.startswith("T:"):
                # Dividir a mensagem por :
                parts = msg.split(":")
                
                # O ticker est√° na posi√ß√£o 1 (ap√≥s o T:)
                if len(parts) < 2:
                    return
                    
                symbol = parts[1]
                
                # De acordo com a documenta√ß√£o, o √≠ndice 2 √© o pre√ßo do √∫ltimo neg√≥cio
                # Procuramos pelo campo ":2:" na mensagem
                if ":2:" in msg:
                    # Encontrar o √≠ndice onde come√ßa ":2:"
                    field_marker = ":2:"
                    idx = msg.find(field_marker)
                    if idx == -1:
                        return
                        
                    # O valor come√ßa ap√≥s ":2:"
                    idx += len(field_marker)
                    
                    # O valor termina no pr√≥ximo ":"
                    end_idx = msg.find(":", idx)
                    if end_idx == -1:
                        end_idx = len(msg)
                        
                    # Extrair e converter o valor
                    try:
                        price_str = msg[idx:end_idx]
                        last_price = float(price_str)
                        
                        # Verificar se o pre√ßo √© v√°lido
                        if last_price <= 0:
                            logger.warning(f"‚ö†Ô∏è Pre√ßo inv√°lido para {symbol}: {last_price}")
                            return
                            
                        # Encontrar o ticker completo (com sufixo) no mapeamento
                        original_ticker = self.ticker_map.get(symbol)
                        
                        if not original_ticker:
                            logger.warning(f"‚ö†Ô∏è Ticker n√£o encontrado no mapeamento: {symbol}")
                            return
                        
                        logger.info(f"üí≤ Pre√ßo de {symbol} ({original_ticker}): R$ {last_price:.2f}")
                        
                        # Atualizar o pre√ßo no banco de dados
                        self._update_price(original_ticker, last_price)
                        
                        # Incrementar contador de atualiza√ß√µes recebidas
                        self._atualizacoes_recebidas += 1
                        
                    except ValueError:
                        logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel converter o pre√ßo: {msg[idx:end_idx]}")
                else:
                    # Se n√£o encontrar o campo 2, √© uma atualiza√ß√£o parcial
                    logger.debug(f"Mensagem de atualiza√ß√£o parcial ignorada: {msg}")
                    
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao processar mensagem de cota√ß√£o: {str(e)}")
            logger.error(f"Mensagem: {msg}")
    
    def _update_price(self, ticker: str, price: float):
        """
        Atualiza o pre√ßo de um ativo no banco de dados
        
        Args:
            ticker (str): Ticker do ativo
            price (float): Novo pre√ßo
        """
        if not self.supabase:
            logger.error("‚ö†Ô∏è Supabase n√£o inicializado. N√£o √© poss√≠vel atualizar pre√ßos.")
            return
            
        try:
            # Atualizar o pre√ßo e a data de atualiza√ß√£o
            update_data = {
                'preco_atual': price,
                'data_atualizacao': time.strftime('%Y-%m-%dT%H:%M:%S')
            }
            
            # Executar atualiza√ß√£o
            response = self.supabase.table('ativos').update(update_data).eq('ticker', ticker).execute()
            
            if response.data and len(response.data) > 0:
                logger.info(f"‚úÖ Pre√ßo atualizado para {ticker}: R$ {price:.2f}")
                
                # Atualizar o objeto local tamb√©m para manter consist√™ncia
                for ativo in self.ativos:
                    if ativo['ticker'] == ticker:
                        ativo['preco_atual'] = price
                        ativo['data_atualizacao'] = update_data['data_atualizacao']
                        break
            else:
                logger.warning(f"‚ö†Ô∏è Nenhum registro atualizado para {ticker}")
                
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erro ao atualizar pre√ßo para {ticker}: {str(e)}")


def main():
    # Definir o intervalo entre atualiza√ß√µes (em segundos)
    # 60 = 1 minuto
    # 300 = 5 minutos
    INTERVALO = 60
    
    # Definir o timeout para receber cota√ß√µes (em segundos)
    TIMEOUT = 20
    
    logger.info("\n" + "="*60)
    logger.info(f"üöÄ Iniciando atualizador de pre√ßos via Cedro CD3")
    logger.info(f"‚è±Ô∏è Intervalo: {INTERVALO} segundos | Timeout: {TIMEOUT} segundos")
    logger.info(f"üë§ Usu√°rio: {CD3_USERNAME}")
    logger.info("="*60 + "\n")
    
    # Tickers n√£o dispon√≠veis na Cedro
    logger.info("‚ö†Ô∏è Aviso: CDI e USDBRL n√£o est√£o dispon√≠veis na Cedro e ser√£o ignorados")
    
    # Criar e iniciar o atualizador
    updater = CedroUpdater(CD3_USERNAME, CD3_PASSWORD, interval_seconds=INTERVALO, timeout=TIMEOUT)
    updater.start()
    
    try:
        # Manter o programa em execu√ß√£o at√© Ctrl+C
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("\nüõë Interrup√ß√£o detectada. Finalizando...")
    finally:
        # Garantir que o atualizador seja corretamente finalizado
        updater.stop()
        
    logger.info("üëã Obrigado por usar o atualizador de pre√ßos via Cedro CD3!")


if __name__ == "__main__":
    main()